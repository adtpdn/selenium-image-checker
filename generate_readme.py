import json
from datetime import datetime, timedelta

def generate_readme(results):
    # Convert timestamp to GMT+8
    timestamp = datetime.fromisoformat(results['timestamp'])
    gmt8_offset = timedelta(hours=8)
    timestamp_gmt8 = timestamp + gmt8_offset
    formatted_timestamp = timestamp_gmt8.strftime("%Y-%m-%d %H:%M:%S GMT+8")

    readme = f"""# Selenium Image Checker Report

## Executive Summary

This report provides an overview of the image availability status across specified URLs, as checked by our automated Selenium Image Checker tool. The check was performed using both Chrome and Firefox browsers to ensure cross-browser compatibility.

**Report Generation Date:** {formatted_timestamp}

## Status Overview

| URL | Chrome Status | Firefox Status |
|-----|---------------|----------------|
"""

    for url in results['chrome']:
        chrome_status = results['chrome'][url]['status']
        firefox_status = results['firefox'][url]['status']
        readme += f"| {url} | {chrome_status} | {firefox_status} |\n"

    readme += """
## Detailed Findings

Below is a comprehensive breakdown of the results, including specific details on any missing images:

"""

    for url in results['chrome']:
        chrome_data = results['chrome'][url]
        firefox_data = results['firefox'][url]
        
        if chrome_data['status'] == 'Missing Images' or firefox_data['status'] == 'Missing Images':
            readme += f"### {url}\n\n"
            
            if chrome_data['status'] == 'Missing Images':
                readme += "#### Chrome\n\nMissing images:\n"
                for img in chrome_data['missing_images']:
                    readme += f"- {img['name']} ({img['url']})\n"
                readme += "\n"
            
            if firefox_data['status'] == 'Missing Images':
                readme += "#### Firefox\n\nMissing images:\n"
                for img in firefox_data['missing_images']:
                    readme += f"- {img['name']} ({img['url']})\n"
                readme += "\n"

    readme += """
## Methodology

Our Selenium Image Checker utilizes WebDriver to load each specified URL in both Chrome and Firefox browsers. It then analyzes all image elements on the page to identify any that fail to load properly.

## Next Steps

1. Review the detailed findings for any identified issues.
2. Prioritize fixing any missing images, especially on critical pages.
3. Consider implementing regular automated checks to catch issues early.

## About This Report

This report is automatically generated by our Selenium Image Checker tool. It's designed to help maintain the visual integrity of your web properties across different browsers.

For any questions or concerns regarding this report, please contact the web maintenance team.

For a visual representation of this report, please refer to our [full HTML report](https://adtpdn.github.io/selenium-image-checker/).
"""

    return readme

try:
    with open('results.json', 'r') as f:
        results = json.load(f)

    readme_content = generate_readme(results)

    with open('README.md', 'w') as f:
        f.write(readme_content)

    print("README generated successfully.")
except Exception as e:
    print(f"An error occurred: {str(e)}")
    raise